using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public abstract class Heuristic
{
	[Tooltip("Name of the heuristic")]
	public string name;
	
	[Tooltip("Description of the heuristic")]
	public string description;
	
	[Tooltip("Lookup table with square roots")]
	public static readonly float[] sqrts = { 0f, 1f, 1.414214f, 1.732051f, 2f, 2.236068f, 2.44949f, 2.645751f, 2.828427f, 3f, 3.162278f, 3.316625f, 3.464102f, 3.605551f, 3.741657f, 3.872983f, 4f, 4.123106f, 4.24264f, 4.358899f, 4.472136f, 4.582576f, 4.690416f, 4.795832f, 4.89898f, 5f, 5.09902f, 5.196152f, 5.291502f, 5.385165f, 5.477226f, 5.567764f, 5.656854f, 5.744563f, 5.830952f, 5.91608f, 6f, 6.082763f, 6.164414f, 6.244998f, 6.324555f, 6.403124f, 6.480741f, 6.557438f, 6.63325f, 6.708204f, 6.78233f, 6.855655f, 6.928203f, 7f, 7.071068f, 7.141428f, 7.211102f, 7.28011f, 7.348469f, 7.416198f, 7.483315f, 7.549834f, 7.615773f, 7.681146f, 7.745967f, 7.81025f, 7.874008f, 7.937254f, 8f, 8.062258f, 8.124039f, 8.185352f, 8.246211f, 8.306623f, 8.3666f, 8.426149f, 8.485281f, 8.544003f, 8.602325f, 8.660254f, 8.717798f, 8.774964f, 8.83176f, 8.888194f, 8.944272f, 9f, 9.055386f, 9.110434f, 9.165152f, 9.219544f, 9.273619f, 9.327379f, 9.380832f, 9.433981f, 9.486833f, 9.539392f, 9.591663f, 9.643651f, 9.69536f, 9.746795f, 9.797959f, 9.848858f, 9.899495f, 9.949874f, 10f, 10.04988f, 10.0995f, 10.14889f, 10.19804f, 10.24695f, 10.29563f, 10.34408f, 10.3923f, 10.44031f, 10.48809f, 10.53565f, 10.583f, 10.63015f, 10.67708f, 10.72381f, 10.77033f, 10.81665f, 10.86278f, 10.90871f, 10.95445f, 11f, 11.04536f, 11.09054f, 11.13553f, 11.18034f, 11.22497f, 11.26943f, 11.31371f, 11.35782f, 11.40175f, 11.44552f, 11.48913f, 11.53256f, 11.57584f, 11.61895f, 11.6619f, 11.7047f, 11.74734f, 11.78983f, 11.83216f, 11.87434f, 11.91638f, 11.95826f, 12f, 12.04159f, 12.08305f, 12.12436f, 12.16553f, 12.20656f, 12.24745f, 12.28821f, 12.32883f, 12.36932f, 12.40967f, 12.4499f, 12.49f, 12.52996f, 12.56981f, 12.60952f, 12.64911f, 12.68858f, 12.72792f, 12.76715f, 12.80625f, 12.84523f, 12.8841f, 12.92285f, 12.96148f, 13f, 13.0384f, 13.0767f, 13.11488f, 13.15295f, 13.19091f, 13.22876f, 13.2665f, 13.30413f, 13.34166f, 13.37909f, 13.41641f, 13.45362f, 13.49074f, 13.52775f, 13.56466f, 13.60147f, 13.63818f, 13.67479f, 13.71131f, 13.74773f, 13.78405f, 13.82028f, 13.85641f, 13.89244f, 13.92839f, 13.96424f, 14f, 14.03567f, 14.07125f, 14.10674f, 14.14214f, 14.17745f, 14.21267f, 14.24781f, 14.28286f, 14.31782f, 14.3527f, 14.3875f, 14.4222f, 14.45683f, 14.49138f, 14.52584f, 14.56022f, 14.59452f, 14.62874f, 14.66288f, 14.69694f, 14.73092f, 14.76482f, 14.79865f, 14.8324f, 14.86607f, 14.89966f, 14.93318f, 14.96663f, 15f, 15.0333f, 15.06652f, 15.09967f, 15.13275f, 15.16575f, 15.19868f, 15.23155f, 15.26434f, 15.29706f, 15.32971f, 15.36229f, 15.3948f, 15.42725f, 15.45963f, 15.49193f, 15.52417f, 15.55635f, 15.58846f, 15.6205f, 15.65248f, 15.68439f, 15.71623f, 15.74802f, 15.77973f, 15.81139f, 15.84298f, 15.87451f, 15.90597f, 15.93738f, 15.96872f, 16f, 16.03122f, 16.06238f, 16.09348f, 16.12452f, 16.15549f, 16.18641f, 16.21728f, 16.24808f, 16.27882f, 16.30951f, 16.34014f, 16.3707f, 16.40122f, 16.43168f, 16.46208f, 16.49242f, 16.52271f, 16.55295f, 16.58312f, 16.61325f, 16.64332f, 16.67333f, 16.70329f, 16.7332f, 16.76305f, 16.79286f, 16.8226f, 16.8523f, 16.88194f, 16.91154f, 16.94107f, 16.97056f, 17f, 17.02939f, 17.05872f, 17.08801f, 17.11724f, 17.14643f, 17.17556f, 17.20465f, 17.23369f, 17.26268f, 17.29162f, 17.32051f, 17.34935f, 17.37815f, 17.40689f, 17.4356f, 17.46425f, 17.49286f, 17.52142f, 17.54993f, 17.5784f, 17.60682f, 17.63519f, 17.66352f, 17.69181f, 17.72005f, 17.74824f, 17.77639f, 17.80449f, 17.83255f, 17.86057f, 17.88854f, 17.91647f, 17.94436f, 17.9722f, 18f, 18.02776f, 18.05547f, 18.08314f, 18.11077f, 18.13836f, 18.1659f, 18.19341f, 18.22087f, 18.24829f, 18.27567f, 18.30301f, 18.3303f, 18.35756f, 18.38478f, 18.41195f, 18.43909f, 18.46618f, 18.49324f, 18.52026f, 18.54724f, 18.57417f, 18.60108f, 18.62794f, 18.65476f, 18.68154f, 18.70829f, 18.73499f, 18.76166f, 18.78829f, 18.81489f, 18.84144f, 18.86796f, 18.89444f, 18.92089f, 18.9473f, 18.97367f, 19f, 19.0263f, 19.05256f, 19.07878f, 19.10497f, 19.13113f, 19.15724f, 19.18333f, 19.20937f, 19.23538f, 19.26136f, 19.2873f, 19.31321f, 19.33908f, 19.36492f, 19.39072f, 19.41649f, 19.44222f, 19.46792f, 19.49359f, 19.51922f, 19.54482f, 19.57038f, 19.59592f, 19.62142f, 19.64688f, 19.67232f, 19.69772f, 19.72308f, 19.74842f, 19.77372f, 19.79899f, 19.82423f, 19.84943f, 19.87461f, 19.89975f, 19.92486f, 19.94994f, 19.97499f, 20f, 20.02498f, 20.04994f, 20.07486f, 20.09975f, 20.12461f, 20.14944f, 20.17424f, 20.19901f, 20.22375f, 20.24846f, 20.27313f, 20.29778f, 20.3224f, 20.34699f, 20.37155f, 20.39608f, 20.42058f, 20.44505f, 20.46949f, 20.4939f, 20.51828f, 20.54264f, 20.56696f, 20.59126f, 20.61553f, 20.63977f, 20.66398f, 20.68816f, 20.71231f, 20.73644f, 20.76054f, 20.78461f, 20.80865f, 20.83267f, 20.85665f, 20.88061f, 20.90454f, 20.92845f, 20.95233f, 20.97618f, 21f, 21.0238f, 21.04757f, 21.07131f, 21.09502f, 21.11871f, 21.14237f, 21.16601f, 21.18962f, 21.2132f, 21.23676f, 21.26029f, 21.2838f, 21.30728f, 21.33073f, 21.35416f, 21.37756f, 21.40093f, 21.42429f, 21.44761f, 21.47091f, 21.49418f, 21.51744f, 21.54066f, 21.56386f, 21.58703f, 21.61018f, 21.63331f, 21.65641f, 21.67948f, 21.70253f, 21.72556f, 21.74856f, 21.77154f, 21.79449f, 21.81742f, 21.84033f, 21.86321f, 21.88607f, 21.9089f, 21.93171f, 21.9545f, 21.97726f, 22f, 22.02271f, 22.04541f, 22.06808f, 22.09072f, 22.11334f, 22.13594f, 22.15852f, 22.18107f, 22.2036f, 22.22611f, 22.2486f, 22.27106f, 22.2935f, 22.31591f, 22.33831f, 22.36068f, 22.38303f, 22.40536f, 22.42766f, 22.44994f, 22.4722f, 22.49444f, 22.51666f, 22.53885f, 22.56103f, 22.58318f, 22.60531f, 22.62742f };
	
	[Tooltip("Lookup table with sine values for angles")]
	public static readonly float[] sines = { 0f, 0.008726535f, 0.01745241f, 0.02617695f, 0.0348995f, 0.04361939f, 0.05233596f, 0.06104854f, 0.06975647f, 0.0784591f, 0.08715574f, 0.09584575f, 0.1045285f, 0.1132032f, 0.1218693f, 0.1305262f, 0.1391731f, 0.1478094f, 0.1564345f, 0.1650476f, 0.1736482f, 0.1822355f, 0.190809f, 0.1993679f, 0.2079117f, 0.2164396f, 0.224951f, 0.2334454f, 0.2419219f, 0.25038f, 0.258819f, 0.2672384f, 0.2756374f, 0.2840154f, 0.2923717f, 0.3007058f, 0.309017f, 0.3173046f, 0.3255681f, 0.3338069f, 0.3420201f, 0.3502074f, 0.3583679f, 0.3665012f, 0.3746066f, 0.3826835f, 0.3907311f, 0.3987491f, 0.4067366f, 0.4146932f, 0.4226183f, 0.4305111f, 0.4383712f, 0.4461978f, 0.4539905f, 0.4617486f, 0.4694716f, 0.4771588f, 0.4848096f, 0.4924236f, 0.5f, 0.5075384f, 0.5150381f, 0.5224985f, 0.5299193f, 0.5372996f, 0.5446391f, 0.551937f, 0.5591929f, 0.5664063f, 0.5735765f, 0.580703f, 0.5877852f, 0.5948228f, 0.601815f, 0.6087614f, 0.6156615f, 0.6225147f, 0.6293204f, 0.6360782f, 0.6427876f, 0.649448f, 0.656059f, 0.6626201f, 0.6691306f, 0.6755902f, 0.6819984f, 0.6883546f, 0.6946584f, 0.7009093f, 0.7071068f, 0.7132505f, 0.7193398f, 0.7253743f, 0.7313537f, 0.7372773f, 0.7431449f, 0.7489557f, 0.7547095f, 0.760406f, 0.7660444f, 0.7716246f, 0.7771459f, 0.7826082f, 0.7880107f, 0.7933533f, 0.7986355f, 0.8038568f, 0.809017f, 0.8141155f, 0.8191521f, 0.8241262f, 0.8290375f, 0.8338858f, 0.8386706f, 0.8433915f, 0.8480481f, 0.8526402f, 0.8571673f, 0.8616291f, 0.8660254f, 0.8703557f, 0.8746197f, 0.8788171f, 0.8829476f, 0.8870109f, 0.8910065f, 0.8949344f, 0.8987941f, 0.9025853f, 0.9063078f, 0.9099613f, 0.9135455f, 0.9170601f, 0.9205048f, 0.9238795f, 0.9271839f, 0.9304176f, 0.9335804f, 0.9366722f, 0.9396926f, 0.9426415f, 0.9455186f, 0.9483237f, 0.9510565f, 0.9537169f, 0.9563047f, 0.9588197f, 0.9612617f, 0.9636304f, 0.9659258f, 0.9681476f, 0.9702957f, 0.9723699f, 0.9743701f, 0.976296f, 0.9781476f, 0.9799247f, 0.9816272f, 0.9832549f, 0.9848077f, 0.9862856f, 0.9876884f, 0.9890159f, 0.9902681f, 0.9914448f, 0.9925461f, 0.9935719f, 0.9945219f, 0.9953962f, 0.9961947f, 0.9969173f, 0.9975641f, 0.9981348f, 0.9986295f, 0.9990482f, 0.9993908f, 0.9996573f, 0.9998477f, 0.9999619f, 1f };
	
	[Tooltip("Lookup table with sine values multiplied by goal bounding strength")]
	public static float[] goalBoundingSines = new float[181];
	
	
	
	
	/// <summary>
	/// Calculates passage cost for given parameters
	/// </summary>
	/// <param name="x"> X coordinate of the node </param>
	/// <param name="y"> Y coordinate of the node </param>
	/// <param name="parentNode"> Parent node </param>
	/// <returns> Cost of the passage for given parameters </returns>
	public abstract float GetPassageCost(int x, int y, Node parentNode);
	
	/// <summary>
	/// Calculates goal bounding's strength for given parameters
	/// </summary>
	/// <param name="x"> X coordinate of the node </param>
	/// <param name="y"> Y coordinate of the node </param>
	/// <param name="parentNode"> Parent node </param>
	/// <returns> Goal bounding's strength </returns>
	public float GetGoalBoundingStrength(int x, int y, Node parentNode)
	{
		// Calculate angle to the target
		Vector2 fromParent = new Vector2(x - parentNode.x, y - parentNode.y);
		Vector2 toGoal = new Vector2(StartGoalManager.goalCol - parentNode.x, StartGoalManager.goalRow - parentNode.y);
		float angle = Vector2.Angle(fromParent, toGoal);
		
		// Return goal bounding strength
		return goalBoundingSines[(int)angle];
	}
	
	/// <summary>
	/// Calculates costs for given parameters
	/// </summary>
	/// <param name="x"> X coordinate of the node </param>
	/// <param name="y"> Y coordinate of the node </param>
	/// <param name="parentNode"> Parent node </param>
	/// <param name="baseCost"> Base cost of the node </param>
	/// <param name="goalBoundingCost"> Cost of the node increased by goal bounding </param>
	public void GetCosts(int x, int y, Node parentNode, out float baseCost, out float goalBoundingCost)
	{
		// Get node's base cost
		float passageCost = GetPassageCost(x, y, parentNode);
		baseCost = parentNode.baseCost + passageCost;
		
		// Check if goal bounding should be applied
		if (GoalBoundingManager.shouldApply)
			goalBoundingCost = baseCost + passageCost * GetGoalBoundingStrength(x, y, parentNode);
		else
			goalBoundingCost = baseCost;
	}
	
	/// <summary>
	/// Calculates node's cost and applies it to that node
	/// </summary>
	/// <param name="node"> Node to calculate cost </param>
	public void CalculateCost(Node node)
	{
		// Get costs of the node
		GetCosts(node.x, node.y, node.parentNode, out node.baseCost, out node.goalBoundCost);
	}
}
